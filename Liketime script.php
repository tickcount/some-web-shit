<?
	/*
		–°–∫—Ä–∏–ø—Ç –õ–∞–π–∫-–¢–∞–π–º–∞ –≤ –≥—Ä—É–ø–ø—É
		–°–æ–∑–¥–∞—Ç–µ–ª—å: [
			Danil Somerholder / vk.com/id92774
			Ivan Salvatore / vk.com/s9008
		]

		–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 23.04.2017
		–ü—Ä–æ—Å—å–±–∞: –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞, –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞. –£–≤–∞–∂–∞–π—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.
		–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ LyntCore.com
		–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞: [
			1. –°–±–æ—Ä —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª, —Ä–µ–ø–æ—Å—Ç–Ω—É–ª, –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –ø–æ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö id –≤ –º–∞—Å—Å–∏–≤.
			2. –°–ª—É—á–∞–Ω—ã–π –≤—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö.
			3. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
		]
	*/

	# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–∞–π–∫ –¢–∞–π–º–∞
	$liketime = new liketime([
		'group' => 126796920, # ID –ì—Ä—É–ø–ø—ã –±–µ–∑ –∑–Ω–∞–∫–∞ `-`
		'access_token' => 'acc', # –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∫ –≥—Ä—É–ø–ø–µ (ACCESS_TOKEN)
		'pinned' => 0, # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å –∑–∞–∫—Ä–µ–ø, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ 1, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ 0
		'timeout' => 1 # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
	]);


	# LikeTime Init.
	$liketime->calculations();	# –ü–æ–¥—Å—á—ë—Ç
	$liketime->winner();		# –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
	$liketime->post();			# –ü–æ—Å—Ç–∏–Ω–≥


	# –ù–µ —Å–æ–≤–µ—Ç—É—é –Ω–∏—á–µ–≥–æ —Ç—É—Ç —Ç—Ä–æ–≥–∞—Ç—å
	# –ù–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —Ç–æ —ç—Ç–æ –≤–∞—à–µ –ø—Ä–∞–≤–æ :<
	class liketime {

		function __construct($settings){
			$settings = (object) $settings;
			$this->group = $settings->group;
			$this->access_token = $settings->access_token;
			$this->pinned = $settings->pinned;
			$this->timeout = $settings->timeout;
		}

		public function calculations(){
			$request = $this->apivk('execute', ['code' => '
				var wall = API.wall.get({"owner_id":"-'.$this->group.'", "count":2})["items"]['.$this->pinned.'];
				var likes = API.likes.getList({"type":"post", "owner_id":"-'.$this->group.'", "item_id":wall["id"], "filter":"likes", "count":1000})["items"];
				var copies = API.likes.getList({"type":"post", "owner_id":"-'.$this->group.'", "item_id":wall["id"], "filter":"copies", "count":1000})["items"];
				var comments = API.wall.getComments({"owner_id":"-'.$this->group.'","post_id":wall["id"], "count":2})["items"];
				var time = API.utils.getServerTime({}); return {"likes":likes, "copies":copies, "comments":comments, "wall":wall, "time":time};
			']);

			# –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞
			if($request->error) die($request->error->error_msg);

			$comments = [];
			foreach ($request->response->comments as $user) {
				if($user->from_id > 0) $comments[] = $user->from_id;
			}

			$this->tickets = array_merge($request->response->likes, $request->response->copies, $comments); # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –∑–∞ —Å—á—ë—Ç —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤
			$this->winner = $this->tickets[array_rand($this->tickets)]; # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
			$this->last_post = round(($request->response->time - $request->response->wall->date) / 60, 0); # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ—Å—Ç–µ
		}

		public function winner(){
			$request = $this->apivk('execute', ['code' => '
				var last_name_gen = API.users.get({"lang":"ru", "user_ids":'.$this->winner.', "name_case":"gen"})[0]["first_name"];
				var last_name = API.users.get({"lang":"ru", "user_ids":'.$this->winner.'})[0];
				var photo = API.photos.get({"owner_id":'.$this->winner.', "album_id":"profile", "rev":1, "extended":1, "count":1})["items"][0];
				return {"last_name_gen":last_name_gen, "last_name":last_name["first_name"]+" "+last_name["last_name"], "photo":photo};
			']);

			$this->winner = (object) [
				'id' => $request->response->photo->id,
				'owner_id' => $request->response->photo->owner_id,
				'likes' => $request->response->photo->likes->count,
				'name' => $request->response->last_name,
				'name_gen' => $request->response->last_name_gen,
				'tickets' => array_keys($this->tickets, $request->response->photo->owner_id)
			];
		}

		public function post(){
			if(!$this->winner->owner_id) die($this->status('‚è© –û–∂–∏–¥–∞–Ω–∏–µ –ª–∞–π–∫–æ–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ—Å—Ç–µ'));
			if($this->last_post >= $this->timeout){
				$this->apivk('wall.post', ['owner_id' => '-'.$this->group, 'from_group' => 1, 'attachments' => 'photo'.$this->winner->owner_id.'_'.$this->winner->id, 'message' => "
					üìå @club".$this->group." (–õ–∞–π–∫-–¢–∞–π–º) ‚Ä¢ ".date("d/m/o")." üîç
					‚è© –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - @id".$this->winner->owner_id." (".$this->winner->name.") ‚è™
					üì¶ –°–µ–π—á–∞—Å –Ω–∞ –∞–≤–∞—Ç–∞—Ä–µ —É @id".$this->winner->owner_id." (".$this->winner->name_gen."): ".$this->formating($this->winner->likes)." ‚ù§
					üí° –®–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É: ".round(count($this->winner->tickets) * 100 / count($this->tickets), 2)."% üèÜ
					‚úè –¢–µ–≥–∏: #–õ–¢ #–õ–∞–π–∫–¢–∞–π–º #LT #LikeTime #–õ–∞–π–∫–∏ #–õ–∞–π–∫ #Likes #Like #Photo #Cool
				"]); $this->status('‚è© –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ '.$this->word($this->timeout, '–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'));
			} else $this->status('‚è© –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ '.$this->word(($this->timeout - $this->last_post), '–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'));
		}

		public function status($text){
			$this->apivk('status.set', ['text' => $text, 'group_id' => $this->group]);
		}

		public function word($n, $s1, $s2, $s3, $b = false){
		    $m = $n % 10; $j = $n % 100;
		    if($b) $n = $n;
		    if($m == 0 || $m >= 5 || ($j >= 10 && $j <= 20)) return $n.' '.$s3;
		    if($m >= 2 && $m <= 4 ) return  $n.' '.$s2;
		    return $n.' '.$s1;
		}

		public function formating($num) {
			# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
			# By Somerholder
			if(floor($num / 1000000) != false) return str_replace('.'.str_repeat(0, 2), false, number_format($num / 1000000, 2)).'M';
				elseif(floor($num / 1000) != false) return str_replace('.'.str_repeat(0, 2), false, number_format($num / 1000, 2)).'K';
					else return (int) $num;
		}

		public function apivk($method, $params = []){
			$ch = curl_init('https://api.vk.com/method/'.$method);

	        # Curl Default Settings
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);

			curl_setopt($ch, CURLOPT_POST, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, array_merge($params, ['v' => '5.62', 'access_token' => $this->access_token]));
			curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (compatible; LikeTime; +http://'.$_SERVER['HTTP_HOST'].'/)');

	        # Creating response and closing curl
			$json = json_decode(curl_exec($ch)); curl_close($ch);
			if($json->error) return (object) ['error' => $json->error];
				elseif($json == null || $json->response == false) return (object) ['error' => ['error_code' => 1, 'error_msg' => 'Unknown Error']];
					elseif($json->response) return $json;
		}
	}